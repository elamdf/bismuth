#+author: Elam Day-Friedland

Code reviews are important!
How come they're so clunky?


* How Code Reviews Happen Today
People usually do code reviews on a platform like GitHub,
where a reviewer performs discrete 'review' events on a feature branch.
These 'review' events generally consist of
- looking through the diff
- leaving inline comments related to specific parts of the code
- leaving general, overarching comments related to the entire PR

These comments are created and within GitHub (not the repo itself),
and are not associated with the repo's content outside of GitHub.
When a reviewer leaves a comment on a line of code,
it's associated with the most recent commit at the time of creation.

Once the code is changed for a file,
however,
the comment is poisoned with an "outdated" flag and manual effort must be undergone to determine if it should be resolved or updated.
This is a direct result of comments being  only loosely coupled with the code changing under them.

In summary,
*modern code reviews suffer from decoupling the review process from the code changes requested.*
* Bismuth
Bismuth is a collection of utilities (=inline-cr= and =brain=) attempting to alleviate these challenges.

=inline-cr= makes it easy to have code review discussions truly in-line,
allowing comment threads to be version controlled as part of the code itself.

=brain= is a tool for reviewers,
keeping track of diff hunks that have been reviewed (the 'brain'),
so only new changes are presented when a re-review is requested.

Bismuth is heavily inspired by [[https://www.youtube.com/watch?v=MUqvXHEjmus][this]] talk from Jane Street about Iron,
their internal code review platform.

* Inline Code Reviews
- review comments are tracked in version control
- no tabbing between Github and your editor when replying to, acting on, or resolving comments
- code review comments are always 'up to date', since they're updated alongside the code

** [X]CR Syntax
A code review is left by a "reviewer" to be addressed by an "author" using the syntax
=> CR <reviewer> for <author>=, such as in the following example (=elamdf= is the author):

[[./img/actionable.png]]

=>CR <reviewer> for <author>= makes this thread actionable for the author.
An author can either delete the comment if they're confident it's been resolved,
or reply:

[[./img/author_response.png]]

Note the 'bit' flip from CR to XCR: this makes this thread actionable for the reviewer.
DWR (delete when read) asks the reviewer to remove (resolve) the thread when they are satisfied.
If the reviewer is not satisfied, they can flip the bit back
and so on.

[[./img/reviewer_response.png]]

This conversation is tracked in the commit history,
exactly the same as the code changed alongside it.


** How Bismuth Makes Code Reviews Easier
For now, Bismuth
- highlights actionable and non-actionable CR threads based on the author's username
- provides keybindings for navigating CR threads
- allows a user to aggregate actionable CR threads for a given file or project


Here is the current default keymap.
#+BEGIN_SRC
(define-key map (kbd "C-c C-n") #'inline-cr-next-actionable)
(define-key map (kbd "C-c C-p") #'inline-cr-prev-actionable)
(define-key map (kbd "C-c t") #'inline-cr-find-cr-mentions)
(define-key map (kbd "C-c T") #'inline-cr-list-all-project-mentions)
(define-key map (kbd "C-c RET") #'inline-cr-toggle-cr-xcr)
(define-key map (kbd "RET") #'inline-cr-jump-to-thread-end)
#+END_SRC
See the source in ~inline-cr.el~ for more information.

* Brains for Inline Code Review
Each reviewer for a given PR attempting to merge `feature` into `target` ideally has a has a 'review brain' for that PR.

This review brain collects all of the diff hunks that they've reviewed and signed off on.
This is currently represented as a branch called feature-brain-$USER,
which exists as a worktree on the reviewer's machine and contains unstaged versions of all changes in the branch.
This clearly exposes the branch's diff to trunk,
and allows chunks to be 'signed off on' by the reviewer

A PR is considered fully reviewed when all feature-brain-* branches are identical to the feature branch,
indicating that all diffs in the feature branch have been reviewed.
An example Github CI workflow in ~.github/workflows/check-brains.yml~ enforces that all pushed =brain= s for a given feature branch contain all diff hunks in the feature.

** How Bismuth Makes Brain-Based Code Review Eaiser
The current scripts assume that any changes to the =target= branch don't need to be re-reviewed,
and are automatically added to the brain.
This means that merging (or rebasing) =target= into =feature= will only require review of merge conflict resolutions.

This allows reviewers to continuously only review newly committed code,
rather than having to review the entire PR every time comments are requested.

* Installation
Clone this repo, add =bismuth= to your =load-path=, and add
#+BEGIN_SRC
(require 'inline-cr)
(require 'brain)
#+END_SRC
To your =init.el=!
You can check out ~bismuth-example-config.el~ for some settings that you might want to use.

* TODOs
** TODO A nice github-like visual aggregator for all open (i.e. existing) comment threads
