* Bismuth
Bismuth is a collection of scripts to make brain-based, inline code reviews easy.
It is heavily inspired by [[https://www.youtube.com/watch?v=MUqvXHEjmus][this]] talk from Jane Street about Iron,
their internal code review platform.

* Code Reviews
They're important!
Especially for anything complex or collaborative

People usually do them on a platform like Github,
where there are either
- discrete 'review' events, which contain a set of comments that might be associated with a given line of a file at the latest commit at the time of review
- individual comments associated with a line of a file at the latest commit when that comment was active

This is fine if the code is never changed after it's reviewed.
Once the code is changed for a file,
however,
the comment is poisoned with an "outdated" flag and manual effort must be undergone to determine if it should be resolved or updated.

* Inline Code Reviews
- review comments are tracked in version control
- no tabbing between Github and your editor when replying to, acting on, or resolving comments
- code review comments are always 'up to date', since they're updated alongside the code

** [X]CR Syntax
A code review is left by a "reviewer" to be addressed by an "author"
#+BEGIN_SRC’
code code code
[comment symbol, such as # or //] > CR reviewer for author: pls add docstring
> It would also be good to add some `assert`s to sanity check the input
code code code
#+END_SRC’
"CR reviewer for author" makes this thread actionable for the author.
An author can either delete the comment if they're confident it's been resolved,
or reply
#+BEGIN_SRC’
code code code
[comment symbol, such as # or //] > XCR reviewer for author: pls add docstring
> It would also be good to add some `assert`s to sanity check the input
> author: fixed. DWR if you're happy with the changes
code code code
#+END_SRC’
Note the 'bit' flip from CR to XCR.
This makes this thread actionable for the reviewer.
DWR (delete when read) asks the reviewer to remove (resolve) the thread when they are satisfied.
If the reviewer is not satisfied, they can flip the bit back
#+BEGIN_SRC’
code code code
[comment symbol, such as # or //] > CR reviewer for author: pls add docstring
> It would also be good to add some `assert`s to sanity check the input
> author: fixed. DWR if you're happy with the changes
> reviewer: pls fix the typo in the function name and DWR
code code code
#+END_SRC’
and so on.

** How Bismuth Makes Code Reviews Easier
For now, Bismuth provides some nice highlighting for actionable/nonactionable review threads,
as well as keybindings and utility functions to navigate and aggregate said threads.

Here is the current default keymap.
#+BEGIN_SRC
(define-key map (kbd "C-c C-n") #'inline-cr-next-actionable)
(define-key map (kbd "C-c C-p") #'inline-cr-prev-actionable)
(define-key map (kbd "C-c t") #'inline-cr-find-cr-mentions)
(define-key map (kbd "C-c T") #'inline-cr-list-all-project-mentions)
(define-key map (kbd "C-c RET") #'inline-cr-toggle-cr-xcr)
(define-key map (kbd "RET") #'inline-cr-jump-to-thread-end)
#+END_SRC
See the source in ~inline-cr.el~ for more information.

* Brains for Inline Code Review
Each reviewer for a given PR attempting to merge `feature` into `target` ideally has a has a 'review brain' for that PR.

This review brain collects all of the diff hunks that they've reviewed and signed off on.
This is currently represented as a branch called feature-brain-$USER,
which exists as a worktree on the reviewer's machine and contains unstaged versions of all changes in the branch.
This clearly exposes the branch's diff to trunk,
and allows chunks to be 'signed off on' by the reviewer

A PR is considered fully reviewed when all feature-brain-* branches are identical to the feature branch,
indicating that all diffs in the feature branch have been reviewed.
An example Github CI workflow in ~.github/workflows/check-brains.yml~ enforces that all pushed =brain= s for a given feature branch contain all diff hunks in the feature.

** How Bismuth Makes Brain-Based Code Review Eaiser
The current scripts assume that any changes to the =target= branch don't need to be re-reviewed,
and are automatically added to the brain.
This means that merging (or rebasing) =target= into =feature= will only require review of merge conflict resolutions.

This allows reviewers to continuously only review newly committed code,
rather than having to review the entire PR every time comments are requested.

* Installation
Clone this repo, add =bismuth= to your =load-path=, and add
#+BEGIN_SRC
(require 'inline-cr)
(require 'brain)
#+END_SRC
To your =init.el=!
You can check out ~bismuth-example-config.el~ for some settings that you might want to use.
